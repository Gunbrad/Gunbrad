---
import MainGridLayout from "../layouts/MainGridLayout.astro";
import GuestbookForm from "../components/GuestBook/GuestbookForm.astro";
import GuestbookWall from "../components/GuestBook/GuestbookWall.astro";

// 设置页面元数据
const pageTitle = "留言墙 | Gunbrad的博客";
const pageDescription = "欢迎来到留言墙，在这里你可以与博主交流！";
---

<MainGridLayout title={pageTitle} description={pageDescription}>
  <div class="flex flex-col space-y-8 relative w-full mb-8 onload-animation">
    <!-- 留言墙 -->
    <div class="card-glass px-6 md:px-9 py-6 pb-16 rounded-[var(--radius-large)] relative">
      <GuestbookWall />
      
      <!-- 弹出表单按钮 - 固定在留言墙底部中央 -->
      <div class="text-center absolute bottom-8 left-0 right-0 z-20">
        <button 
          id="open-form-button"
          class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all transform hover:-translate-y-1 shadow-md"
          onclick="document.getElementById('form-modal').classList.remove('hidden'); document.body.style.overflow='hidden';"
        >
          <span class="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clip-rule="evenodd" />
            </svg>
            写留言
          </span>
        </button>
      </div>
    </div>
    
    <!-- 弹出表单模态框 -->
    <div id="form-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
      <div class="bg-white dark:bg-gray-800 rounded-lg max-w-3xl w-full max-h-[90vh] overflow-y-auto relative shadow-xl">
        <button 
          id="close-form-button" 
          class="absolute top-4 right-4 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
          onclick="document.getElementById('form-modal').classList.add('hidden'); document.body.style.overflow='';"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
        <div class="p-8">
          <GuestbookForm />
        </div>
      </div>
    </div>
  </div>
</MainGridLayout>

<style is:global>
  /* 定义卡片玻璃效果 */
  .card-glass {
    background-color: transparent;
    backdrop-filter: blur(16px);
    -webkit-backdrop-filter: blur(16px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  }
  
  html.dark .card-glass {
    background-color: rgba(25, 25, 35, 0.45);
    border: 1px solid rgba(255, 255, 255, 0.07);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.25);
  }
  
  html:not(.dark) .card-glass {
    background-color: rgba(255, 255, 255, 0.45);
  }
  
  /* 留言卡片样式修复 - 确保背景色和模糊效果正常工作 */
  .guestbook-message.card-base {
    /* 确保自定义背景色优先级高于全局card-base样式 */
    background-color: var(--custom-bg-color, rgba(249, 250, 251, 0.85)) !important;
    backdrop-filter: blur(12px) !important;
    /* 添加边框和阴影增强立体感 */
    border: 1px solid rgba(255, 255, 255, 0.2) !important;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1) !important;
    position: relative;
    overflow: hidden;
  }
  
  /* 覆盖card-base类的背景设置，使自定义背景色生效 */
  html.dark .guestbook-message.card-base,
  html:not(.dark) .guestbook-message.card-base {
    background-color: var(--custom-bg-color, rgba(249, 250, 251, 0.85)) !important;
  }
  
  /* 留言墙背景透明度调整 */
  .guestbook-wall {
    background-color: transparent !important;
  }
  
  /* 增强留言卡片质感 */
  .message-content {
    position: relative;
    z-index: 1;
  }
</style>

<script is:inline>
  // 使用inline脚本确保每次页面加载时都执行
  document.addEventListener('click', function(e) {
    // 点击背景关闭模态框
    if (e.target.id === 'form-modal') {
      document.getElementById('form-modal').classList.add('hidden');
      document.body.style.overflow = '';
    }
  });
  
  // ESC键关闭
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      const formModal = document.getElementById('form-modal');
      if (formModal && !formModal.classList.contains('hidden')) {
        formModal.classList.add('hidden');
        document.body.style.overflow = '';
      }
    }
  });
  
  // 修复留言样式 - 确保透明度正确应用
  document.addEventListener('DOMContentLoaded', function() {
    // 监听留言加载
    const observer = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        if (mutation.type === 'childList') {
          const messages = document.querySelectorAll('.guestbook-message');
          messages.forEach(function(message) {
            const bgColor = message.style.backgroundColor;
            if (bgColor) {
              // 转换颜色到RGBA格式
              let rgba = convertToRGBA(bgColor, 0.85);
              message.style.backgroundColor = rgba;
              message.style.setProperty('--custom-bg-color', rgba);
            }
          });
        }
      });
    });
    
    // 转换颜色到RGBA
    function convertToRGBA(color, alpha) {
      // 处理rgb颜色
      if (color.startsWith('rgb')) {
        const rgbMatch = color.match(/rgb\((\d+),\s*(\d+),\s*(\d+)\)/);
        if (rgbMatch) {
          return `rgba(${rgbMatch[1]}, ${rgbMatch[2]}, ${rgbMatch[3]}, ${alpha})`;
        }
        return color;
      }
      
      // 处理十六进制颜色
      if (color.startsWith('#')) {
        const r = parseInt(color.slice(1, 3), 16);
        const g = parseInt(color.slice(3, 5), 16);
        const b = parseInt(color.slice(5, 7), 16);
        return `rgba(${r}, ${g}, ${b}, ${alpha})`;
      }
      
      return color;
    }
    
    // 观察留言容器
    const container = document.getElementById('guestbook-messages');
    if (container) {
      observer.observe(container, { childList: true, subtree: true });
    }
  });

  // 动态设置留言卡片的背景色
  document.addEventListener('DOMContentLoaded', function() {
    // 监听动态创建的留言卡片
    const observer = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
          mutation.addedNodes.forEach(function(node) {
            if (node.classList && node.classList.contains('guestbook-message')) {
              // 获取背景色
              const bgColor = node.style.backgroundColor;
              // 设置自定义CSS变量
              node.style.setProperty('--custom-bg-color', bgColor);
            }
          });
        }
      });
    });
    
    // 监听留言容器
    const messagesContainer = document.getElementById('guestbook-messages');
    if (messagesContainer) {
      observer.observe(messagesContainer, { childList: true, subtree: true });
    }
  });

  console.log('留言墙页面脚本已加载，原始颜色版本：', new Date().toISOString());
</script> 